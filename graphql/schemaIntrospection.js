const fs = require('fs');
const path = require('path');

const graphql = JSON.stringify({
    query:
        'query schema{\r\n  __schema {\r\n    queryType {\r\n      name\r\n    }\r\n    mutationType {\r\n      name\r\n    }\r\n    types {\r\n      kind\r\n      name\r\n      description # Add description for types\r\n      fields(includeDeprecated: true) {\r\n        name\r\n        description # Add description for fields\r\n        args {\r\n          name\r\n          description # Add description for arguments\r\n          type {\r\n            kind\r\n            name\r\n            ofType {\r\n              kind\r\n              name\r\n              ofType {\r\n                kind\r\n                name\r\n                ofType {\r\n                  kind\r\n                  name\r\n                  ofType {\r\n                    kind\r\n                    name\r\n                    ofType {\r\n                      kind\r\n                      name\r\n                      ofType {\r\n                        kind\r\n                        name\r\n                        ofType {\r\n                          kind\r\n                          name\r\n                          ofType {\r\n                            kind\r\n                            name\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        type {\r\n          kind\r\n          name\r\n          ofType {\r\n            kind\r\n            name\r\n            ofType {\r\n              kind\r\n              name\r\n              ofType {\r\n                kind\r\n                name\r\n                ofType {\r\n                  kind\r\n                  name\r\n                  ofType {\r\n                    kind\r\n                    name\r\n                    ofType {\r\n                      kind\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        isDeprecated\r\n        deprecationReason\r\n      }\r\n      inputFields {\r\n        name\r\n        description # Add description for input fields\r\n        type {\r\n          kind\r\n          name\r\n          ofType {\r\n            kind\r\n            name\r\n            ofType {\r\n              kind\r\n              name\r\n              ofType {\r\n                kind\r\n                name\r\n                ofType {\r\n                  kind\r\n                  name\r\n                  ofType {\r\n                    kind\r\n                    name\r\n                    ofType {\r\n                      kind\r\n                      name\r\n                      ofType {\r\n                        kind\r\n                        name\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      interfaces {\r\n        kind\r\n        name\r\n        description # Add description for interfaces\r\n        ofType {\r\n          kind\r\n          name\r\n          ofType {\r\n            kind\r\n            name\r\n            ofType {\r\n              kind\r\n              name\r\n              ofType {\r\n                kind\r\n                name\r\n                ofType {\r\n                  kind\r\n                  name\r\n                  ofType {\r\n                    kind\r\n                    name\r\n                    ofType {\r\n                      kind\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      enumValues(includeDeprecated: true) {\r\n        name\r\n        description # Add description for enum values\r\n        isDeprecated\r\n        deprecationReason\r\n      }\r\n      possibleTypes {\r\n        kind\r\n        name\r\n        ofType {\r\n          kind\r\n          name\r\n          ofType {\r\n            kind\r\n            name\r\n            ofType {\r\n              kind\r\n              name\r\n              ofType {\r\n                kind\r\n                name\r\n                ofType {\r\n                  kind\r\n                  name\r\n                  ofType {\r\n                    kind\r\n                    name\r\n                    ofType {\r\n                      kind\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    directives {\r\n      name\r\n      description # Add description for directives\r\n      locations\r\n      args {\r\n        name\r\n        description # Add description for directive arguments\r\n        type {\r\n          kind\r\n          name\r\n          ofType {\r\n            kind\r\n            name\r\n            ofType {\r\n              kind\r\n              name\r\n              ofType {\r\n                kind\r\n                name\r\n                ofType {\r\n                  kind\r\n                  name\r\n                  ofType {\r\n                    kind\r\n                    name\r\n                    ofType {\r\n                      kind\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n',
    variables: {},
});
const requestOptions = {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: graphql,
    redirect: 'follow',
};

fetch('xxxx', requestOptions)
    .then((response) => response.json())
    .then((result) => fs.writeFileSync(path.join(__dirname, './schema.json'), JSON.stringify(result.data, null, 2), 'utf8'))
    .catch((error) => console.log('error', error));
